{"ast":null,"code":"import _asyncToGenerator from \"/opt/Angular/myapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { throwError, firstValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class EmplyoeeService {\n  constructor(http) {\n    this.http = http;\n    this._url = \"https://m36wk.mocklab.io/getEmplyoees\";\n  }\n  getEmplyoees() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const response = yield firstValueFrom(_this.http.get(_this._url)).then(resolvedValue => {\n        const dataArray = resolvedValue.split(','); // Splitting the resolved value into an array\n        console.log(dataArray); // Output: ['data 1', 'data 2', 'data 3']\n      });\n\n      console.log(response);\n      return response;\n    })();\n  }\n  errorHandler(error) {\n    return throwError(() => new Error(error.message || \"server error\"));\n  }\n}\nEmplyoeeService.ɵfac = function EmplyoeeService_Factory(t) {\n  return new (t || EmplyoeeService)(i0.ɵɵinject(i1.HttpClient));\n};\nEmplyoeeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EmplyoeeService,\n  factory: EmplyoeeService.ɵfac\n});","map":{"version":3,"names":["throwError","firstValueFrom","EmplyoeeService","constructor","http","_url","getEmplyoees","_this","_asyncToGenerator","response","get","then","resolvedValue","dataArray","split","console","log","errorHandler","error","Error","message","i0","ɵɵinject","i1","HttpClient","factory","ɵfac"],"sources":["/opt/Angular/myapp/src/app/Serivces/emplyoee/emplyoee.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Emplyoee } from './emplyoee';\nimport { Observable, throwError , firstValueFrom} from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n\n@Injectable()\nexport class EmplyoeeService {\n\n  private _url : string = \"https://m36wk.mocklab.io/getEmplyoees\";\n  constructor(private http : HttpClient) { }\n\n  async getEmplyoees(){\n    const response = await firstValueFrom(this.http.get(this._url)).then((resolvedValue : string) => {\n      const dataArray = resolvedValue.split(','); // Splitting the resolved value into an array\n      console.log(dataArray); // Output: ['data 1', 'data 2', 'data 3']\n    });\n    console.log(response);\n    return response;\n  }\n\n  errorHandler(error: HttpErrorResponse): Observable<any> {\n    return throwError(() => new Error(error.message || \"server error\"));\n  }\n}\n"],"mappings":";AAGA,SAAqBA,UAAU,EAAGC,cAAc,QAAO,MAAM;;;AAK7D,OAAM,MAAOC,eAAe;EAG1BC,YAAoBC,IAAiB;IAAjB,KAAAA,IAAI,GAAJA,IAAI;IADhB,KAAAC,IAAI,GAAY,uCAAuC;EACtB;EAEnCC,YAAYA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAChB,MAAMC,QAAQ,SAASR,cAAc,CAACM,KAAI,CAACH,IAAI,CAACM,GAAG,CAACH,KAAI,CAACF,IAAI,CAAC,CAAC,CAACM,IAAI,CAAEC,aAAsB,IAAI;QAC9F,MAAMC,SAAS,GAAGD,aAAa,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;QAC5CC,OAAO,CAACC,GAAG,CAACH,SAAS,CAAC,CAAC,CAAC;MAC1B,CAAC,CAAC;;MACFE,OAAO,CAACC,GAAG,CAACP,QAAQ,CAAC;MACrB,OAAOA,QAAQ;IAAC;EAClB;EAEAQ,YAAYA,CAACC,KAAwB;IACnC,OAAOlB,UAAU,CAAC,MAAM,IAAImB,KAAK,CAACD,KAAK,CAACE,OAAO,IAAI,cAAc,CAAC,CAAC;EACrE;;AAhBWlB,eAAe,C;mBAAfA,eAAe,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAftB,eAAe,C;SAAfA,eAAe;EAAAuB,OAAA,EAAfvB,eAAe,CAAAwB;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}