{"ast":null,"code":"import { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class ObservableComponent {\n  // Subscribe to the Observable\n  ngOnInit() {\n    const myObservable = new Observable(observer => {\n      // Emit values to the observer\n      observer.next(1); // Emit the first value\n      observer.next(2); // Emit the second value\n      observer.next(3); // Emit the third value\n      // Complete the Observable (no more values will be emitted)\n      observer.complete();\n      // You can also handle errors if needed\n      // observer.error('Something went wrong!');\n    });\n\n    const observer = {\n      next: value => console.log('Received value:', value),\n      error: error => console.error('Error:', error),\n      complete: () => console.log('Observable complete!')\n    };\n    myObservable.subscribe(observer);\n  }\n}\nObservableComponent.ɵfac = function ObservableComponent_Factory(t) {\n  return new (t || ObservableComponent)();\n};\nObservableComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ObservableComponent,\n  selectors: [[\"app-observable\"]],\n  decls: 2,\n  vars: 0,\n  template: function ObservableComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \" observable works! \");\n      i0.ɵɵelementEnd();\n    }\n  },\n  encapsulation: 2\n});","map":{"version":3,"names":["Observable","ObservableComponent","ngOnInit","myObservable","observer","next","complete","value","console","log","error","subscribe","selectors","decls","vars","template","ObservableComponent_Template","rf","ctx","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["/opt/Angular/myapp/src/app/Observable/observable/observable.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-observable',\n  template: `\n    <p>\n      observable works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class ObservableComponent implements OnInit{\n\n\n  // Subscribe to the Observable\n  ngOnInit(): void {\n    const myObservable = new Observable<number>((observer) => {\n      // Emit values to the observer\n      observer.next(1); // Emit the first value\n      observer.next(2); // Emit the second value\n      observer.next(3); // Emit the third value\n\n      // Complete the Observable (no more values will be emitted)\n      observer.complete();\n\n      // You can also handle errors if needed\n      // observer.error('Something went wrong!');\n    });\n    const observer = {\n      next: (value: number) => console.log('Received value:', value),\n      error: (error: any) => console.error('Error:', error),\n      complete: () => console.log('Observable complete!')\n    };\n\n    myObservable.subscribe(observer);\n  }\n\n}\n"],"mappings":"AACA,SAASA,UAAU,QAAQ,MAAM;;AAYjC,OAAM,MAAOC,mBAAmB;EAG9B;EACAC,QAAQA,CAAA;IACN,MAAMC,YAAY,GAAG,IAAIH,UAAU,CAAUI,QAAQ,IAAI;MACvD;MACAA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;MAClBD,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;MAClBD,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;MAElB;MACAD,QAAQ,CAACE,QAAQ,EAAE;MAEnB;MACA;IACF,CAAC,CAAC;;IACF,MAAMF,QAAQ,GAAG;MACfC,IAAI,EAAGE,KAAa,IAAKC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,KAAK,CAAC;MAC9DG,KAAK,EAAGA,KAAU,IAAKF,OAAO,CAACE,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MACrDJ,QAAQ,EAAEA,CAAA,KAAME,OAAO,CAACC,GAAG,CAAC,sBAAsB;KACnD;IAEDN,YAAY,CAACQ,SAAS,CAACP,QAAQ,CAAC;EAClC;;AAxBWH,mBAAmB,C;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB,C;QAAnBA,mBAAmB;EAAAW,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,QAAA,WAAAC,6BAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MAP5BE,EAAA,CAAAC,cAAA,QAAG;MACDD,EAAA,CAAAE,MAAA,0BACF;MAAAF,EAAA,CAAAG,YAAA,EAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}